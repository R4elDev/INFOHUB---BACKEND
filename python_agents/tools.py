# tools.py
from __future__ import annotations
from typing import Any, Dict, Optional, List
from pydantic import BaseModel
from decimal import Decimal


# ========= MODELO RETORNO =========
class ToolResult(BaseModel):
    ok: bool
    status: int
    data: Any


# ========= HELPERS =========
def _to_float(x) -> float:
    if x is None:
        return 0.0
    if isinstance(x, Decimal):
        return float(x)
    if isinstance(x, (int, float)):
        return float(x)
    if isinstance(x, str):
        s = x.strip().replace("R$", "").replace(" ", "")
        # trata formatos pt-BR tipo "1.234,56"
        s = s.replace(".", "").replace(",", ".")
        try:
            return float(s)
        except ValueError:
            return 0.0
    try:
        return float(x)
    except Exception:
        return 0.0


def _fmt_brl(v: float) -> str:
    return f"R$ {v:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")


# ========= BEST PROMOTIONS =========
def best_promotions(promotions_data: Optional[List[Dict[str, Any]]] = None, max_results: int = 10, termo_busca: str = "", user_id: int = 0) -> ToolResult:
    """
    Busca as melhores promo√ß√µes. Se promotions_data vier do backend, usa ela.
    Sen√£o, faz consulta direta no banco de dados.
    """
    try:
        promocoes = promotions_data or []
        
        # Se n√£o h√° dados do backend, tenta consulta direta (fallback)
        if not promocoes and termo_busca and user_id:
            try:
                from database import db_manager
                promocoes = db_manager.buscar_promocoes_real(termo_busca, user_id, 10, max_results)
            except Exception as db_error:
                print(f"Erro consulta direta: {db_error}")
                promocoes = []
        
        if not promocoes:
            return ToolResult(ok=False, status=404, data="Nenhuma promo√ß√£o encontrada.")
            
        # Ordena por pre√ßo e dist√¢ncia
        ordered = sorted(
            promocoes,
            key=lambda x: (_to_float(x.get("preco_promocional", 0)), _to_float(x.get("distance_km", 0))),
        )

        top = ordered[:max_results]

        result = []
        for r in top:
            preco = _to_float(r.get("preco_promocional", 0))
            r_fmt = {**r, "preco_brl": _fmt_brl(preco)}
            result.append(r_fmt)

        return ToolResult(ok=True, status=200, data=result)
    except Exception as e:
        return ToolResult(ok=False, status=500, data=str(e))


# ========= FIND NEARBY PROMOTIONS (novo - para listar promo√ß√µes gerais) =========
def find_nearby_promotions(user_id: int = None) -> List[Dict[str, Any]]:
    """
    üèÜ BUSCA AS MELHORES PROMO√á√ïES PR√ìXIMAS (SEM PRODUTO ESPEC√çFICO)
    Para quando o usu√°rio pergunta "quais as promo√ß√µes?"
    """
    try:
        # TENTA USAR CONEX√ÉO MYSQL REAL PRIMEIRO
        try:
            from mysql_real import db_manager
            
            # Verifica se tem conex√£o
            if db_manager.connection and db_manager.connection.is_connected():
                print(f"üîç Fazendo busca GERAL de promo√ß√µes pr√≥ximas para usu√°rio {user_id}")
                
                # Busca real no banco
                real_results = db_manager.buscar_promocoes_proximas(user_id or 1, 10, 5)
                
                if real_results:
                    print(f"‚úÖ Encontradas {len(real_results)} promo√ß√µes pr√≥ximas no MySQL")
                    return real_results
                else:
                    print("‚ö†Ô∏è Nenhuma promo√ß√£o pr√≥xima encontrada no MySQL")
                    return []
            else:
                print("‚ùå Sem conex√£o MySQL - usando dados simulados")
                
        except ImportError:
            print("‚ùå M√≥dulo mysql_real n√£o encontrado - usando dados simulados")
        except Exception as mysql_error:
            print(f"‚ùå Erro MySQL: {mysql_error} - usando dados simulados")
        
        # FALLBACK PARA DADOS SIMULADOS (se MySQL n√£o funcionar)
        print(f"üîß Usando dados simulados de promo√ß√µes pr√≥ximas")
        
        return [
            {
                "id_promocao": 1,
                "produto": "Leite Integral 1L",
                "estabelecimento": "Supermercado ABC",
                "preco_promocional": 4.50,
                "data_fim": "2025-10-15",
                "distance_km": 0.8,
                "preco_brl": "R$ 4,50"
            },
            {
                "id_promocao": 2,
                "produto": "Arroz 5kg",
                "estabelecimento": "Atacado Bom Pre√ßo",
                "preco_promocional": 12.90,
                "data_fim": "2025-10-18",
                "distance_km": 1.2,
                "preco_brl": "R$ 12,90"
            },
            {
                "id_promocao": 3,
                "produto": "Shampoo 400ml",
                "estabelecimento": "Farm√°cia Popular",
                "preco_promocional": 8.90,
                "data_fim": "2025-10-25",
                "distance_km": 0.5,
                "preco_brl": "R$ 8,90"
            }
        ]
            
    except Exception as e:
        print(f"‚ùå Erro geral na busca de promo√ß√µes pr√≥ximas: {e}")
        return []


# ========= FIND PROMOTIONS (usado pelo agente r√°pido) =========
def find_promotions(user_message: str, user_id: int = None) -> List[Dict[str, Any]]:
    """
    üîç BUSCA REAL DE PROMO√á√ïES NO BANCO
    Esta fun√ß√£o √© chamada pelo agente lightning e faz busca real no MySQL
    """
    try:
        # Extrai termo de busca da mensagem
        term = extract_search_term(user_message)
        
        # TENTA USAR CONEX√ÉO MYSQL REAL PRIMEIRO
        try:
            from mysql_real import db_manager
            
            # Verifica se tem conex√£o
            if db_manager.connection and db_manager.connection.is_connected():
                print(f"üîç Fazendo busca REAL no MySQL para '{term}' e usu√°rio {user_id}")
                
                # Busca real no banco
                real_results = db_manager.buscar_promocoes_real(term, user_id or 1, 10, 5)
                
                if real_results:
                    print(f"‚úÖ Encontradas {len(real_results)} promo√ß√µes REAIS no MySQL")
                    return real_results
                else:
                    print("‚ö†Ô∏è Nenhuma promo√ß√£o encontrada no MySQL")
                    return []
            else:
                print("‚ùå Sem conex√£o MySQL - usando dados simulados")
                
        except ImportError:
            print("‚ùå M√≥dulo mysql_real n√£o encontrado - usando dados simulados")
        except Exception as mysql_error:
            print(f"‚ùå Erro MySQL: {mysql_error} - usando dados simulados")
        
        # FALLBACK PARA DADOS SIMULADOS (se MySQL n√£o funcionar)
        print(f"üîß Usando dados simulados para '{term}'")
        
        if term and term.lower() in ['leite', 'iogurte', 'queijo']:
            # Simula dados reais do banco para latic√≠nios
            return [
                {
                    "id_promocao": 1,
                    "produto": f"{term.title()} Integral 1L",
                    "estabelecimento": "Supermercado ABC",
                    "preco_promocional": 4.50,
                    "preco_original": 5.20,
                    "data_fim": "2025-10-15",
                    "distance_km": 0.8,
                    "preco_brl": "R$ 4,50"
                },
                {
                    "id_promocao": 2,
                    "produto": f"{term.title()} Desnatado 1L",
                    "estabelecimento": "Mercado XYZ",
                    "preco_promocional": 4.80,
                    "preco_original": 5.50,
                    "data_fim": "2025-10-20",
                    "distance_km": 1.2,
                    "preco_brl": "R$ 4,80"
                }
            ]
        elif term and term.lower() in ['arroz', 'feij√£o', 'a√ß√∫car', '√≥leo']:
            # Simula dados para alimentos
            return [
                {
                    "id_promocao": 3,
                    "produto": f"{term.title()} 5kg",
                    "estabelecimento": "Atacado Bom Pre√ßo",
                    "preco_promocional": 12.90,
                    "preco_original": 15.50,
                    "data_fim": "2025-10-18",
                    "distance_km": 2.1,
                    "preco_brl": "R$ 12,90"
                }
            ]
        elif term and term.lower() in ['shampoo', 'condicionador', 'sabonete']:
            # Simula dados para higiene
            return [
                {
                    "id_promocao": 4,
                    "produto": f"{term.title()} 400ml",
                    "estabelecimento": "Farm√°cia Popular",
                    "preco_promocional": 8.90,
                    "preco_original": 12.50,
                    "data_fim": "2025-10-25",
                    "distance_km": 0.5,
                    "preco_brl": "R$ 8,90"
                }
            ]
        else:
            # N√£o encontrou promo√ß√µes
            return []
            
    except Exception as e:
        print(f"‚ùå Erro geral na busca: {e}")
        return []

def extract_search_term(message: str) -> str:
    """Extrai termo de busca da mensagem do usu√°rio com corre√ß√µes ortogr√°ficas"""
    message_lower = message.lower().strip()
    
    # ‚ö†Ô∏è PRIMEIRA VERIFICA√á√ÉO: N√£o extrai produto de perguntas gerais sobre promo√ß√µes
    skip_phrases = [
        'quais as promo√ß√µes', 'que promo√ß√µes', 'promo√ß√µes dispon√≠veis', 
        'quais ofertas', 'que ofertas', 'ofertas dispon√≠veis',
        'promo√ß√µes perto', 'quais as ofertas', 'ofertas perto de mim',
        'ofertas pr√≥ximas', 'promo√ß√µes pr√≥ximas', 'quais s√£o suas promo√ß√µes',
        'suas promo√ß√µes', 'as promo√ß√µes', 'suas ofertas'
    ]
    for phrase in skip_phrases:
        if phrase in message_lower:
            print(f"üö´ Pergunta geral detectada: '{phrase}' - n√£o extraindo produto")
            return ""  # N√£o extrai produto para perguntas gerais
    
    # Tamb√©m verifica palavras isoladas que indicam pergunta geral
    words = message_lower.split()
    if len(words) >= 2 and words[0] in ['quais', 'que'] and any(w in words for w in ['promo√ß√µes', 'ofertas', 'suas']):
        print(f"üö´ Pergunta geral por palavras: '{message}' - n√£o extraindo produto")
        return ""
    
    # Dicion√°rio de corre√ß√µes ortogr√°ficas comuns
    corre√ß√µes = {
        'iougurte': 'iogurte',
        'yogurte': 'iogurte', 
        'yogurt': 'iogurte',
        'leiti': 'leite',
        'xampu': 'shampoo',
        'refrigeranti': 'refrigerante',
        'detergent√©': 'detergente',
        'acucar': 'a√ß√∫car',
        'a√ßucar': 'a√ß√∫car',
        'oleo': '√≥leo',
        'sabao': 'sab√£o',
        'feija': 'feij√£o',
        'feijao': 'feij√£o',
        'remedio': 'rem√©dio'
    }
    
    # Aplica corre√ß√µes primeiro
    message_corrigida = message_lower
    for erro, correto in corre√ß√µes.items():
        if erro in message_corrigida:
            message_corrigida = message_corrigida.replace(erro, correto)
            print(f"üîß Corre√ß√£o aplicada: '{erro}' ‚Üí '{correto}'")
    
    # Lista de produtos conhecidos (expandida)
    produtos = [
        'leite', 'iogurte', 'queijo', 'manteiga', 'creme', 'requeij√£o',
        'shampoo', 'condicionador', 'sabonete', 'pasta', 'escova', 'desodorante',
        'detergente', 'sab√£o', 'amaciante', 'desinfetante', '√°gua sanit√°ria',
        'arroz', 'feij√£o', 'a√ß√∫car', '√≥leo', 'sal', 'farinha', 'macarr√£o',
        'suco', 'refrigerante', '√°gua', 'cerveja', 'vinho',
        'p√£o', 'biscoito', 'bolo', 'chocolate', 'caf√©',
        'rem√©dio', 'vitamina', 'band-aid', '√°lcool'
    ]
    
    # Procura produtos na mensagem corrigida
    for produto in produtos:
        if produto in message_corrigida:
            print(f"üéØ Produto detectado: '{produto}' na mensagem '{message}'")
            return produto
    
    # Busca por similaridade (para casos como "yogurt" vs "iogurte")
    # SKIP palavras muito curtas ou stopwords para evitar falsos positivos
    skip_similarity = {'quais', 'qual', 'que', 's√£o', 'suas', 'voce', 'voc√™', 'tem', 'h√°', 'existe', 'onde', 'como', 'quando', 'perto', 'pr√≥ximo'}
    
    for palavra in message_corrigida.split():
        if len(palavra) > 4 and palavra not in skip_similarity:  # S√≥ palavras > 4 chars e n√£o stopwords
            for produto in produtos:
                # Verifica se √© muito similar (diferen√ßa de 1-2 caracteres)
                if abs(len(palavra) - len(produto)) <= 2:
                    diferen√ßas = sum(1 for a, b in zip(palavra, produto) if a != b)
                    if diferen√ßas <= 2:
                        print(f"üîç Produto similar detectado: '{palavra}' ‚Üí '{produto}'")
                        return produto
    
    # Se n√£o encontrar produto espec√≠fico, usa palavras gen√©ricas v√°lidas
    stop_words = {'de', 'da', 'do', 'para', 'com', 'sem', 'por', 'em', 'na', 'no', 'a', 'o', 'e', 'ou', 'que', 'quero', 'buscar', 'encontrar', 'ver', 'tem', 'h√°', 'existe', 'barato', 'caro', 'promo√ß√£o', 'desconto', 'oferta', 'perto', 'longe', 'pr√≥ximo', 'preciso', 'quais', 'qual', 's√£o', 'suas', 'voc√™', 'voce', 'como', 'quando', 'onde'}
    
    words = message_corrigida.split()
    for word in words:
        if len(word) > 3 and word not in stop_words:
            print(f"üí≠ Termo gen√©rico detectado: '{word}'")
            return word
    
    return ""

# ========= FAQ =========
_FAQ = {
    "o que √© o sistema": "Encontramos promo√ß√µes ativas perto de voc√™ e ranqueamos por pre√ßo e dist√¢ncia.",
    "como escolhem as promocoes": "Filtramos por validade, aplicamos raio a partir da sua localiza√ß√£o e ordenamos por menor pre√ßo (desempate por dist√¢ncia).",
    "como informar minha localizacao": "Sua localiza√ß√£o √© obtida do seu endere√ßo cadastrado. Cadastre um endere√ßo no perfil para resultados locais.",
    "como filtrar por categoria": "Pe√ßa a categoria pelo nome (ex.: latic√≠nios, bebidas, higiene).",
    "foco": "Sou um agente de promo√ß√µes e d√∫vidas r√°pidas do sistema; n√£o respondo fora desse tema."
}


def faq_answer(question: str) -> ToolResult:
    q = question.lower()
    for k, v in _FAQ.items():
        if k in q:
            return ToolResult(ok=True, status=200, data={"question": k, "answer": v})
    return ToolResult(ok=True, status=200, data={"answer": _FAQ["foco"]})


# ========= Registro =========
def health_ping(meta: Optional[Dict[str, Any]] = None) -> ToolResult:
    """Tool de verifica√ß√£o r√°pida de conectividade do agent."""
    return ToolResult(ok=True, status=200, data={"message": "pong", "meta": meta or {}})


TOOL_REGISTRY = {
    "best_promotions": best_promotions,
    "faq_answer": faq_answer,
    "health_ping": health_ping,
}
