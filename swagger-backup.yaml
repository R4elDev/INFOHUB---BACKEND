openapi: 3.0.3
info:
  title: InfoHub API - Sistema Completo
  description: |
    API completa do InfoHub para gerenciamento de usu√°rios, recupera√ß√£o de senhas e chat com IA para busca de promo√ß√µes.
    
    ## Arquitetura
    - **API Principal**: Node.js/Express (porta 8080)
    - **IA Service**: Python/FastAPI (porta 5001)
    - **Banco**: MySQL com Prisma ORM
    
    ## Autentica√ß√£o
    Rotas protegidas requerem JWT token no header:
    ```
    Authorization: Bearer <token>
    ```
    
    ## Servi√ßos
    1. **Usu√°rios**: Cadastro, login, CRUD
    2. **Recupera√ß√£o de Senha**: Solicita√ß√£o, valida√ß√£o, redefini√ß√£o
    3. **Chat IA**: Busca inteligente de promo√ß√µes
    
  version: 1.0.0
  contact:
    name: InfoHub Team
    email: support@infohub.com
  license:
    name: ISC
    
servers:
  - url: http://localhost:8080/v1/infohub
    description: API Principal (Node.js)
  - url: http://localhost:5001
    description: Servi√ßo de IA (Python)

tags:
  - name: Usu√°rios
    description: Gerenciamento de usu√°rios
  - name: Autentica√ß√£o
    description: Login e autentica√ß√£o
  - name: Recupera√ß√£o de Senha
    description: Sistema de recupera√ß√£o de senha por email
  - name: Chat IA
    description: Intera√ß√£o com IA para busca de promo√ß√µes
  - name: IA Service
    description: Endpoints diretos do servi√ßo Python

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    Usuario:
      type: object
      required:
        - nome
        - email
        - senha
      properties:
        id:
          type: integer
          description: ID √∫nico do usu√°rio
          example: 1
        nome:
          type: string
          description: Nome completo do usu√°rio
          example: "Jo√£o Silva"
        email:
          type: string
          format: email
          description: Email √∫nico do usu√°rio
          example: "joao@email.com"
        senha:
          type: string
          format: password
          description: Senha do usu√°rio (hash)
          example: "123456"
        data_nascimento:
          type: string
          format: date
          description: Data de nascimento
          example: "1990-05-15"
        telefone:
          type: string
          description: Telefone do usu√°rio
          example: "(11) 99999-9999"
        
    UsuarioResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        status_code:
          type: integer
          example: 200
        message:
          type: string
          example: "Usu√°rio criado com sucesso"
        data:
          $ref: '#/components/schemas/Usuario'
          
    LoginRequest:
      type: object
      required:
        - email
        - senha
      properties:
        email:
          type: string
          format: email
          example: "joao@email.com"
        senha:
          type: string
          format: password
          example: "123456"
          
    LoginResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        status_code:
          type: integer
          example: 200
        message:
          type: string
          example: "Login realizado com sucesso"
        token:
          type: string
          description: JWT token para autentica√ß√£o
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/Usuario'
          
    RecuperacaoSenhaRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email para recupera√ß√£o
          example: "joao@email.com"
          
    ValidarCodigoRequest:
      type: object
      required:
        - email
        - codigo
      properties:
        email:
          type: string
          format: email
          example: "joao@email.com"
        codigo:
          type: string
          description: C√≥digo de 6 d√≠gitos enviado por email
          example: "123456"
          
    RedefinirSenhaRequest:
      type: object
      required:
        - email
        - codigo
        - nova_senha
      properties:
        email:
          type: string
          format: email
          example: "joao@email.com"
        codigo:
          type: string
          description: C√≥digo validado
          example: "123456"
        nova_senha:
          type: string
          format: password
          description: Nova senha do usu√°rio
          example: "novaSenha123"
          
    ChatRequest:
      type: object
      required:
        - mensagem
        - idUsuario
      properties:
        mensagem:
          type: string
          description: Mensagem do usu√°rio para a IA
          example: "quais as promo√ß√µes de leite?"
        idUsuario:
          type: integer
          description: ID do usu√°rio logado
          example: 1
          
    ChatResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        status_code:
          type: integer
          example: 200
        message:
          type: string
          example: "Resposta gerada com sucesso"
        data:
          type: object
          properties:
            reply:
              type: string
              description: Resposta da IA
              example: "üõí Encontrei 3 promo√ß√µes de leite perto de voc√™!"
            confidence:
              type: number
              format: float
              description: Confian√ßa da resposta (0-1)
              example: 0.95
            response_time_ms:
              type: integer
              description: Tempo de resposta em milissegundos
              example: 150
            toolsUsed:
              type: array
              items:
                type: string
              example: ["classifier", "find_promotions"]
              
    FastChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Mensagem para a IA
          example: "quais as promo√ß√µes?"
        user_id:
          type: integer
          description: ID do usu√°rio
          example: 1
        session_id:
          type: string
          description: ID da sess√£o
          example: "session_123"
          
    FastChatResponse:
      type: object
      properties:
        reply:
          type: string
          description: Resposta da IA
          example: "üõí Encontrei 3 promo√ß√µes perto de voc√™!"
        confidence:
          type: number
          format: float
          description: Confian√ßa da resposta
          example: 0.95
        response_time_ms:
          type: integer
          description: Tempo de resposta
          example: 50
        method:
          type: string
          description: M√©todo usado pela IA
          example: "promotion_search"
        toolsUsed:
          type: array
          items:
            type: string
          example: ["classifier", "find_promotions"]
          
    ErrorResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        status_code:
          type: integer
          example: 400
        message:
          type: string
          example: "Erro na requisi√ß√£o"
        error:
          type: string
          description: Detalhes do erro
          example: "Campo obrigat√≥rio n√£o informado"

paths:
  # ==============================
  # USU√ÅRIOS
  # ==============================
  /usuarios/cadastro:
    post:
      tags:
        - Usu√°rios
      summary: Cadastrar novo usu√°rio
      description: Cria um novo usu√°rio no sistema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
            example:
              nome: "Jo√£o Silva"
              email: "joao@email.com"
              senha: "123456"
              data_nascimento: "1990-05-15"
              telefone: "(11) 99999-9999"
      responses:
        '201':
          description: Usu√°rio criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          description: Dados inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email j√° existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /usuarios:
    get:
      tags:
        - Usu√°rios
      summary: Listar todos os usu√°rios
      description: Retorna lista de todos os usu√°rios cadastrados
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de usu√°rios
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Usuario'
        '401':
          description: Token inv√°lido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /usuario/{id}:
    get:
      tags:
        - Usu√°rios
      summary: Buscar usu√°rio por ID
      description: Retorna dados de um usu√°rio espec√≠fico
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Dados do usu√°rio
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '404':
          description: Usu√°rio n√£o encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    put:
      tags:
        - Usu√°rios
      summary: Atualizar usu√°rio
      description: Atualiza dados de um usu√°rio existente
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '200':
          description: Usu√°rio atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '404':
          description: Usu√°rio n√£o encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    delete:
      tags:
        - Usu√°rios
      summary: Deletar usu√°rio
      description: Remove um usu√°rio do sistema
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Usu√°rio deletado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Usu√°rio deletado com sucesso"
        '404':
          description: Usu√°rio n√£o encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==============================
  # AUTENTICA√á√ÉO
  # ==============================
  /login:
    post:
      tags:
        - Autentica√ß√£o
      summary: Fazer login
      description: Autentica usu√°rio e retorna JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciais inv√°lidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==============================
  # RECUPERA√á√ÉO DE SENHA
  # ==============================
  /recuperar-senha:
    post:
      tags:
        - Recupera√ß√£o de Senha
      summary: Solicitar recupera√ß√£o de senha
      description: Envia c√≥digo de recupera√ß√£o por email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecuperacaoSenhaRequest'
      responses:
        '200':
          description: C√≥digo enviado por email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "C√≥digo de recupera√ß√£o enviado para o email"
        '404':
          description: Email n√£o encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /validar-codigo:
    post:
      tags:
        - Recupera√ß√£o de Senha
      summary: Validar c√≥digo de recupera√ß√£o
      description: Valida o c√≥digo enviado por email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidarCodigoRequest'
      responses:
        '200':
          description: C√≥digo v√°lido
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "C√≥digo v√°lido"
        '400':
          description: C√≥digo inv√°lido ou expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /redefinir-senha:
    post:
      tags:
        - Recupera√ß√£o de Senha
      summary: Redefinir senha
      description: Define nova senha ap√≥s valida√ß√£o do c√≥digo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedefinirSenhaRequest'
      responses:
        '200':
          description: Senha redefinida com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Senha redefinida com sucesso"
        '400':
          description: C√≥digo inv√°lido ou dados incorretos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==============================
  # CHAT IA (API Principal)
  # ==============================
  /interagir:
    post:
      tags:
        - Chat IA
      summary: Interagir com IA
      description: |
        Endpoint principal para chat com IA. A IA pode responder sobre:
        - Busca de promo√ß√µes espec√≠ficas: "leite barato"
        - Lista geral de promo√ß√µes: "quais as promo√ß√µes?"
        - Melhores pre√ßos por regi√£o: "melhor pre√ßo de arroz perto"
        - Informa√ß√µes sobre produtos: "que produtos t√™m?"
        - Como funciona: "como usar o sistema?"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
            examples:
              busca_especifica:
                summary: Busca produto espec√≠fico
                value:
                  mensagem: "leite barato"
                  idUsuario: 1
              lista_geral:
                summary: Lista todas as promo√ß√µes
                value:
                  mensagem: "quais as promo√ß√µes?"
                  idUsuario: 1
              melhor_preco:
                summary: Melhores pre√ßos por regi√£o
                value:
                  mensagem: "melhor pre√ßo de arroz perto de mim"
                  idUsuario: 1
              ajuda:
                summary: Como funciona
                value:
                  mensagem: "como funciona o sistema?"
                  idUsuario: 1
      responses:
        '200':
          description: Resposta da IA
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
              examples:
                promocoes_encontradas:
                  summary: Promo√ß√µes encontradas
                  value:
                    status: true
                    status_code: 200
                    message: "Resposta gerada com sucesso"
                    data:
                      reply: "üõí **Encontrei leite!**\n\n‚Ä¢ **Leite Integral 1L** no **Supermercado Central**\nüí∞ **R$ 4,99** ‚Ä¢ üìç **2.6 km** ‚Ä¢ üìÖ at√© **2025-10-31**"
                      confidence: 0.95
                      response_time_ms: 150
                      toolsUsed: ["classifier", "find_promotions"]
                lista_promocoes:
                  summary: Lista de promo√ß√µes
                  value:
                    status: true
                    status_code: 200
                    data:
                      reply: "üõçÔ∏è **3 promo√ß√µes ativas perto de voc√™:**\n\n**1.** Detergente - Supermercado Central\nüí∞ R$ 2,99 ‚Ä¢ üìç 2.6 km"
                      confidence: 0.90
                      response_time_ms: 200
        '400':
          description: Dados inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Token inv√°lido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /respostaOllama:
    post:
      tags:
        - Chat IA
      summary: Resposta Ollama (Legacy)
      description: Endpoint legacy para compatibilidade. Use /interagir para novas implementa√ß√µes.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Resposta processada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'

# ==============================
# SERVI√áO IA (Python - Porta 5001)
# ==============================

  # Mudan√ßa de servidor para os endpoints Python
  
servers:
  - url: http://localhost:5001
    description: Servi√ßo de IA (Python)

paths:
  /:
    get:
      tags:
        - IA Service
      summary: Status do servi√ßo IA
      description: Retorna informa√ß√µes sobre o status e modo do servi√ßo de IA
      responses:
        '200':
          description: Status do servi√ßo
          content:
            application/json:
              schema:
                type: object
                properties:
                  service:
                    type: string
                    example: "InfoHub AI Agent"
                  version:
                    type: string
                    example: "4.0.0-LIGHTNING"
                  mode:
                    type: string
                    example: "‚ö° lightning"
                  status:
                    type: string
                    example: "‚ö° READY FOR SPEED"
                  ai_usage:
                    type: string
                    example: "0%"
                    
  /chat:
    post:
      tags:
        - IA Service
      summary: Chat direto com IA
      description: |
        Endpoint direto para chat com IA (sem autentica√ß√£o).
        Otimizado para velocidade com sistema h√≠brido:
        - Regras r√°pidas: 0-5ms (90% dos casos)
        - LLM backup: 200-500ms (10% dos casos)
        
        **Tipos de resposta:**
        - `greeting`: Sauda√ß√µes
        - `general_promotions`: Lista geral de promo√ß√µes
        - `promotion_search`: Busca espec√≠fica
        - `best_nearby`: Melhores pre√ßos por regi√£o
        - `how_it_works`: Como funciona
        - `product_catalog`: Lista de produtos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FastChatRequest'
            examples:
              saudacao:
                summary: Sauda√ß√£o
                value:
                  message: "oi"
                  user_id: 1
              lista_promocoes:
                summary: Lista de promo√ß√µes
                value:
                  message: "quais as promo√ß√µes?"
                  user_id: 1
              busca_produto:
                summary: Busca produto
                value:
                  message: "leite barato"
                  user_id: 1
      responses:
        '200':
          description: Resposta da IA
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FastChatResponse'
              examples:
                resposta_rapida:
                  summary: Resposta instant√¢nea (regras)
                  value:
                    reply: "üëã Oi! Sou seu assistente de promo√ß√µes do InfoHub!"
                    confidence: 0.95
                    response_time_ms: 2
                    method: "greeting"
                    toolsUsed: ["classifier"]
                busca_promocoes:
                  summary: Busca com banco de dados
                  value:
                    reply: "üõí **Encontrei leite!**"
                    confidence: 0.90
                    response_time_ms: 150
                    method: "promotion_search"
                    toolsUsed: ["classifier", "find_promotions"]
                    
  /stats:
    get:
      tags:
        - IA Service
      summary: Estat√≠sticas de performance
      description: Retorna m√©tricas de performance do sistema de IA
      responses:
        '200':
          description: Estat√≠sticas do sistema
          content:
            application/json:
              schema:
                type: object
                properties:
                  agent:
                    type: string
                    example: "lightning (no AI)"
                  total_requests:
                    type: integer
                    example: 1250
                  cache_hits:
                    type: integer
                    example: 1000
                  cache_hit_rate:
                    type: string
                    example: "80.0%"
                  cache_size:
                    type: integer
                    example: 45
                  avg_response_time_ms:
                    type: string
                    example: "35.2"
                  target_time:
                    type: string
                    example: "< 100ms"
                  ai_usage:
                    type: string
                    example: "0% (pure logic)"
                    
  /health:
    get:
      tags:
        - IA Service
      summary: Health check
      description: Verifica se o servi√ßo est√° funcionando
      responses:
        '200':
          description: Servi√ßo funcionando
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "‚úÖ OK"
                  mode:
                    type: string
                    example: "üöÄ ultra-fast"
                  uptime:
                    type: string
                    example: "running"
                  version:
                    type: string
                    example: "3.0.0-TURBO"
                    
  /ollama:
    post:
      tags:
        - IA Service
      summary: Compatibilidade Ollama (Legacy)
      description: Endpoint de compatibilidade com formato antigo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mensagem:
                  type: string
                  example: "quais as promo√ß√µes?"
                idUsuario:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Resposta no formato antigo
          content:
            application/json:
              schema:
                type: object
                properties:
                  reply:
                    type: string
                  toolsUsed:
                    type: array
                    items:
                      type: string
                  status:
                    type: string
                    example: "success"
                  response_time_ms:
                    type: integer